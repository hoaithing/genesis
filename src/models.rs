// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use chrono::NaiveDate;
use chrono::NaiveDateTime;
use chrono::NaiveTime;
use uuid::Uuid;
use chrono::DateTime;
use chrono::offset::Utc;
use diesel::prelude::*;
use bigdecimal::BigDecimal;
use rocket::serde::Serialize;


#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::activities)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Activity {
    pub id: i32,
    pub date: Option<NaiveDate>,
    pub title: Option<String>,
    pub description: Option<String>,
    pub start: Option<NaiveTime>,
    pub end: Option<NaiveTime>,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub category_id: Option<String>,
    pub journal_id: Option<i32>,
    pub user_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_advertisement)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Advertisement {
    pub id: i32,
    pub title: Option<String>,
    pub image: Option<String>,
    pub content: Option<String>,
    pub slug: Option<String>,
    pub active: bool,
    pub order: i32,
    pub created: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub link: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_category)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Category {
    pub id: i32,
    pub name: String,
    pub lft: i32,
    pub rght: i32,
    pub tree_id: i32,
    pub level: i32,
    pub parent_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_configuration)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Configuration {
    pub id: i32,
    pub created_time: Option<DateTime<Utc>>,
    pub updated_time: Option<DateTime<Utc>>,
    pub name: Option<String>,
    pub description: Option<String>,
    pub key: String,
    pub value: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_countryimages)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Countryimage {
    pub id: i32,
    pub image0: Option<String>,
    pub image1: Option<String>,
    pub image2: Option<String>,
    pub image3: Option<String>,
    pub image4: Option<String>,
    pub image5: Option<String>,
    pub image6: Option<String>,
    pub image7: Option<String>,
    pub image8: Option<String>,
    pub image9: Option<String>,
    pub image10: Option<String>,
    pub country_iso_code: Option<String>,
    pub language: String,
    pub country_name: Option<String>,
    pub city: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_crawlingpost)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Crawlingpost {
    pub id: i32,
    pub source: Option<String>,
    pub title: String,
    pub post_type: Option<String>,
    pub post_link: Option<String>,
    pub post_date: Option<DateTime<Utc>>,
    pub post_date_str: Option<String>,
    pub img_url: Option<String>,
    pub country_name: Option<String>,
    pub country_code: Option<String>,
    pub country_iso_code: Option<String>,
    pub language: String,
    pub active: bool,
    pub created: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub order: i32,
    pub article_length: Option<i32>,
    pub city: Option<String>,
    pub description: Option<String>,
    pub images: Vec<Option<String>>,
    pub source_name: Option<String>,
    pub writing_style: Option<String>,
    pub travel_style: Option<String>,
    pub category_id: Option<i32>,
    pub state_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_crawlingpost_pin)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CrawlingpostPin {
    pub id: i32,
    pub crawlingpost_id: i32,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_customservice)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Customservice {
    pub id: i32,
    pub title: Option<String>,
    pub content: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_hotel)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Hotel {
    pub id: i32,
    pub delete_flag: bool,
    pub address: Option<String>,
    pub longitude: BigDecimal,
    pub latitude: BigDecimal,
    pub hotel_name: String,
    pub email: String,
    pub phone_number: String,
    pub description: String,
    pub created_time: NaiveDateTime,
    pub img_url: Option<String>,
    pub user_id: Option<i32>,
    pub credit: Option<BigDecimal>,
    pub city: Option<String>,
    pub country: Option<String>,
    pub country_code: Option<String>,
    pub district: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_hotelservice)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Hotelservice {
    pub id: i32,
    pub service_name: String,
    pub created_time: NaiveDateTime,
    pub delete_flag: bool,
    pub hotel_id: i32,
    pub bookable: bool,
    pub service_description: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_hotelserviceasset)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Hotelserviceasset {
    pub id: i32,
    pub url: String,
    pub created_time: NaiveDateTime,
    pub delete_flag: bool,
    pub hotel_service_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_hotelservicerequest)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Hotelservicerequest {
    pub id: i32,
    pub title: String,
    pub note: Option<String>,
    pub created_time: NaiveDateTime,
    pub status: String,
    pub hotel_service_id: i32,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_prices)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Price {
    pub id: i32,
    pub name: String,
    pub price: f64,
    pub data: f64,
    pub duration: i32,
    pub currency: String,
    pub banner: Option<String>,
    pub base_price: Option<f64>,
    pub country: Option<String>,
    pub created_time: Option<DateTime<Utc>>,
    pub height: Option<i32>,
    pub order: i32,
    pub plan_type: Option<String>,
    pub updated_time: Option<DateTime<Utc>>,
    pub width: Option<i32>,
    pub additional_credit: Option<f64>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_referencecost)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Referencecost {
    pub id: i32,
    pub reference: String,
    pub cost: BigDecimal,
    pub unit: String,
    pub currency_id: Option<String>,
    pub country_iso_code: Option<String>,
    pub city: Option<String>,
    pub country_name: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_sim)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Sim {
    pub id: i32,
    pub sim_id: String,
    pub sim_number: String,
    pub sim_balance: Option<f64>,
    pub created_time: NaiveDateTime,
    pub expired_date: Option<NaiveDateTime>,
    pub subscriber_id: Option<i64>,
    pub sim_serial: Option<String>,
    pub status: Option<String>,
    pub hotel_id: Option<i32>,
    pub user_id: Option<i32>,
    pub last_topup: Option<BigDecimal>,
    pub base_sim_balance: Option<f64>,
    pub active: bool,
    pub last_active: Option<DateTime<Utc>>,
    pub esim: bool,
    pub provider: String,
    pub qr_code: Option<String>,
    pub sim_number_origin: Option<String>,
    pub fup_reset_date: Option<DateTime<Utc>>,
    pub sim_active_date: Option<DateTime<Utc>>,
    pub subscribed: bool,
    pub use_fup_code: bool,
    pub pin: Option<String>,
    pub sent_email: bool,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_simidmapper)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Simidmapper {
    pub id: i32,
    pub imsi: String,
    pub iccid: String,
    pub hotel_id: Option<i32>,
    pub esim: bool,
    pub provider: String,
    pub qr_code: Option<String>,
    pub synced: bool,
    pub last_email: Option<String>,
    pub msisdn: Option<String>,
    pub active: bool,
    pub created: Option<DateTime<Utc>>,
    pub booking_id: Option<String>,
    pub updated: DateTime<Utc>,
    pub assigned: bool,
    pub joytel_pin: String,
    pub sale_partner_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_simidmapper_products)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SimidmapperProduct {
    pub id: i32,
    pub simidmapper_id: i32,
    pub product_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_state)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct State {
    pub id: i32,
    pub name: String,
    pub lft: i32,
    pub rght: i32,
    pub tree_id: i32,
    pub level: i32,
    pub parent_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_topuptransaction)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Topuptransaction {
    pub id: i32,
    pub created_time: Option<NaiveDateTime>,
    pub pricing_plan_id: Option<i32>,
    pub sim_id: i32,
    pub user_id: Option<i32>,
    pub updated_time: Option<DateTime<Utc>>,
    pub amount: BigDecimal,
    pub source: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_topuptransactionbyapi)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Topuptransactionbyapi {
    pub id: i32,
    pub created_time: Option<DateTime<Utc>>,
    pub updated_time: Option<DateTime<Utc>>,
    pub amount: BigDecimal,
    pub delete_flag: bool,
    pub sim_id: i32,
    pub application_id: Option<i32>,
    pub package_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_topuptransactionbyhotel)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Topuptransactionbyhotel {
    pub id: i32,
    pub created_time: NaiveDateTime,
    pub hotel_id: Option<i32>,
    pub topup_transaction_id: Option<i32>,
    pub user_id: i32,
    pub amount: BigDecimal,
    pub package_id: Option<i32>,
    pub sim_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_useractivity)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Useractivity {
    pub id: i32,
    pub created_time: Option<DateTime<Utc>>,
    pub updated_time: Option<DateTime<Utc>>,
    pub activity_name: String,
    pub description: Option<String>,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_vhcategory)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Vhcategory {
    pub id: i32,
    pub name: String,
    pub descriptions: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_virtualholiday)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Virtualholiday {
    pub id: i32,
    pub title: String,
    pub location: String,
    pub img_url: String,
    pub link: String,
    pub post_date: DateTime<Utc>,
    pub live: bool,
    pub category_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::auth_group)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct AuthGroup {
    pub id: i32,
    pub name: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::auth_group_permissions)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct AuthGroupPermission {
    pub id: i32,
    pub group_id: i32,
    pub permission_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::auth_permission)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct AuthPermission {
    pub id: i32,
    pub content_type_id: i32,
    pub codename: String,
    pub name: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::auth_user)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct AuthUser {
    pub id: i32,
    pub password: String,
    pub last_login: Option<NaiveDateTime>,
    pub is_superuser: bool,
    pub username: String,
    pub first_name: String,
    pub email: String,
    pub is_staff: bool,
    pub is_active: bool,
    pub date_joined: NaiveDateTime,
    pub last_name: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::auth_user_groups)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct AuthUserGroup {
    pub id: i32,
    pub user_id: i32,
    pub group_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::auth_user_user_permissions)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct AuthUserUserPermission {
    pub id: i32,
    pub user_id: i32,
    pub permission_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(key))]
#[diesel(table_name = crate::schema::authtoken_token)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct AuthtokenToken {
    pub key: String,
    pub created: NaiveDateTime,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::card_blacklist)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CardBlacklist {
    pub id: i64,
    pub name: Option<String>,
    pub start_number: Option<String>,
    pub end_number: Option<String>,
    pub country: String,
    pub country_code: String,
    pub start_time: Option<NaiveTime>,
    pub end_time: Option<NaiveTime>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::card_whitelist)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CardWhitelist {
    pub id: i64,
    pub name: Option<String>,
    pub start_number: Option<String>,
    pub end_number: Option<String>,
    pub country: String,
    pub country_code: String,
    pub start_time: Option<NaiveTime>,
    pub end_time: Option<NaiveTime>,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::corsheaders_corsmodel)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CorsheadersCorsmodel {
    pub id: i32,
    pub cors: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(name))]
#[diesel(table_name = crate::schema::currency_cache)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CurrencyCache {
    pub name: String,
    pub rate: BigDecimal,
    pub update: DateTime<Utc>,
    pub country: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(number))]
#[diesel(table_name = crate::schema::custom_offer_creditpromotion)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CustomOfferCreditpromotion {
    pub number: String,
    pub created: DateTime<Utc>,
    pub benefit_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::custom_offer_custombenefit)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CustomOfferCustombenefit {
    pub id: i32,
    pub type_: String,
    pub value: BigDecimal,
    pub name: String,
    pub product_types: Vec<Option<String>>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::custom_offer_custombenefit_pricing_plans)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CustomOfferCustombenefitPricingPlan {
    pub id: i32,
    pub custombenefit_id: i32,
    pub prices_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::custom_offer_custombenefit_products)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CustomOfferCustombenefitProduct {
    pub id: i32,
    pub custombenefit_id: i32,
    pub product_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::custom_offer_customvoucher)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CustomOfferCustomvoucher {
    pub id: i32,
    pub name: String,
    pub code: String,
    pub benefit_id: Option<i32>,
    pub custommer: Option<String>,
    pub enable: bool,
    pub one_time: bool,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::custom_offer_redeemlog)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CustomOfferRedeemlog {
    pub id: i32,
    pub code: String,
    pub email: Option<String>,
    pub sim_serial: Option<String>,
    pub created: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub product_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::device_blacklist)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DeviceBlacklist {
    pub id: i64,
    pub device_id: String,
    pub registration_id: String,
    pub phone_type: Option<String>,
    pub location: serde_json::Value,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_admin_log)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoAdminLog {
    pub id: i32,
    pub object_id: Option<String>,
    pub object_repr: String,
    pub action_flag: i32,
    pub change_message: String,
    pub content_type_id: Option<i32>,
    pub user_id: i32,
    pub action_time: NaiveDateTime,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_celery_beat_clockedschedule)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoCeleryBeatClockedschedule {
    pub id: i32,
    pub clocked_time: DateTime<Utc>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_celery_beat_crontabschedule)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoCeleryBeatCrontabschedule {
    pub id: i32,
    pub minute: String,
    pub hour: String,
    pub day_of_week: String,
    pub day_of_month: String,
    pub month_of_year: String,
    pub timezone: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_celery_beat_intervalschedule)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoCeleryBeatIntervalschedule {
    pub id: i32,
    pub every: i32,
    pub period: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_celery_beat_periodictask)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoCeleryBeatPeriodictask {
    pub id: i32,
    pub name: String,
    pub task: String,
    pub args: String,
    pub kwargs: String,
    pub queue: Option<String>,
    pub exchange: Option<String>,
    pub routing_key: Option<String>,
    pub expires: Option<DateTime<Utc>>,
    pub enabled: bool,
    pub last_run_at: Option<DateTime<Utc>>,
    pub total_run_count: i32,
    pub date_changed: DateTime<Utc>,
    pub description: String,
    pub crontab_id: Option<i32>,
    pub interval_id: Option<i32>,
    pub solar_id: Option<i32>,
    pub one_off: bool,
    pub start_time: Option<DateTime<Utc>>,
    pub priority: Option<i32>,
    pub headers: String,
    pub clocked_id: Option<i32>,
    pub expire_seconds: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_celery_beat_solarschedule)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoCeleryBeatSolarschedule {
    pub id: i32,
    pub event: String,
    pub latitude: BigDecimal,
    pub longitude: BigDecimal,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_content_type)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoContentType {
    pub id: i32,
    pub app_label: String,
    pub model: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_flatpage)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoFlatpage {
    pub id: i32,
    pub url: String,
    pub title: String,
    pub content: String,
    pub enable_comments: bool,
    pub template_name: String,
    pub registration_required: bool,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_flatpage_sites)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoFlatpageSite {
    pub id: i32,
    pub flatpage_id: i32,
    pub site_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_mailbox_mailbox)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoMailboxMailbox {
    pub id: i32,
    pub name: String,
    pub uri: Option<String>,
    pub from_email: Option<String>,
    pub active: bool,
    pub last_polling: Option<DateTime<Utc>>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_mailbox_message)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoMailboxMessage {
    pub id: i32,
    pub subject: String,
    pub message_id: String,
    pub from_header: String,
    pub to_header: String,
    pub outgoing: bool,
    pub body: String,
    pub encoded: bool,
    pub processed: DateTime<Utc>,
    pub read: Option<DateTime<Utc>>,
    pub in_reply_to_id: Option<i32>,
    pub mailbox_id: i32,
    pub eml: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_mailbox_messageattachment)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoMailboxMessageattachment {
    pub id: i32,
    pub headers: Option<String>,
    pub document: String,
    pub message_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_migrations)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoMigration {
    pub id: i32,
    pub app: String,
    pub name: String,
    pub applied: NaiveDateTime,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(session_key))]
#[diesel(table_name = crate::schema::django_session)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoSession {
    pub session_key: String,
    pub session_data: String,
    pub expire_date: NaiveDateTime,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::django_site)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct DjangoSite {
    pub id: i32,
    pub name: String,
    pub domain: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::email_message)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct EmailMessage {
    pub id: i32,
    pub subject: String,
    pub body: String,
    pub processed: DateTime<Utc>,
    pub read: Option<DateTime<Utc>>,
    pub done: bool,
    pub source: String,
    pub message_id: Option<String>,
    pub json: Option<serde_json::Value>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::email_subscriber)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct EmailSubscriber {
    pub id: i32,
    pub category: String,
    pub email: String,
    pub created: DateTime<Utc>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::external_order)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct ExternalOrder {
    pub id: i32,
    pub customer: String,
    pub email: Option<String>,
    pub booking_id: String,
    pub start_date: Option<DateTime<Utc>>,
    pub product_id: Option<i32>,
    pub qr_code: Option<String>,
    pub sim_id: Option<String>,
    pub sim_serial: Option<String>,
    pub booking_date: Option<DateTime<Utc>>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::fcm_django_fcmdevice)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct FcmDjangoFcmdevice {
    pub id: i32,
    pub name: Option<String>,
    pub active: bool,
    pub date_created: Option<DateTime<Utc>>,
    pub device_id: Option<String>,
    pub registration_id: String,
    pub type_: String,
    pub user_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::get_sim_rules)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct GetSimRule {
    pub id: i32,
    pub name: String,
    pub rule: String,
    pub value: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::hotel_topup_history)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct HotelTopupHistory {
    pub id: i32,
    pub delete_flag: bool,
    pub amount: Option<BigDecimal>,
    pub created_time: DateTime<Utc>,
    pub create_by_id: i32,
    pub hotel_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::journal)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Journal {
    pub id: i32,
    pub date: Option<NaiveDate>,
    pub title: Option<String>,
    pub description: Option<String>,
    pub start: Option<NaiveDate>,
    pub end: Option<NaiveDate>,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub category: Option<String>,
    pub user_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(name))]
#[diesel(table_name = crate::schema::journal_category)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct JournalCategory {
    pub name: String,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::journal_images)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct JournalImage {
    pub id: i32,
    pub image: Option<String>,
    pub name: Option<String>,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub journal_id: Option<i32>,
    pub activities_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::nation_seal)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct NationSeal {
    pub id: i32,
    pub name: Option<String>,
    pub image: Option<String>,
    pub country_name: Option<String>,
    pub country_iso_code: Option<String>,
    pub city: Option<String>,
    pub created: DateTime<Utc>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::nation_seal_user)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct NationSealUser {
    pub id: i32,
    pub nationseal_id: i32,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::notifications_promonotification)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct NotificationsPromonotification {
    pub id: i32,
    pub title: String,
    pub message: String,
    pub content: Option<String>,
    pub created_time: DateTime<Utc>,
    pub type_: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::notifications_promonotification_users)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct NotificationsPromonotificationUser {
    pub id: i32,
    pub promonotification_id: i32,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::notifications_promonotificationreadby)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct NotificationsPromonotificationreadby {
    pub id: i32,
    pub created_time: DateTime<Utc>,
    pub notification_id: i32,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::oauth2_provider_accesstoken)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Oauth2ProviderAccesstoken {
    pub id: i64,
    pub token: String,
    pub expires: DateTime<Utc>,
    pub scope: String,
    pub application_id: Option<i64>,
    pub user_id: Option<i32>,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub source_refresh_token_id: Option<i64>,
    pub id_token_id: Option<i64>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::oauth2_provider_application)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Oauth2ProviderApplication {
    pub id: i64,
    pub client_id: String,
    pub redirect_uris: String,
    pub client_type: String,
    pub authorization_grant_type: String,
    pub client_secret: String,
    pub name: String,
    pub user_id: Option<i32>,
    pub skip_authorization: bool,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub algorithm: String,
    pub post_logout_redirect_uris: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::oauth2_provider_grant)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Oauth2ProviderGrant {
    pub id: i64,
    pub code: String,
    pub expires: DateTime<Utc>,
    pub redirect_uri: String,
    pub scope: String,
    pub application_id: i64,
    pub user_id: i32,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub code_challenge: String,
    pub code_challenge_method: String,
    pub nonce: String,
    pub claims: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::oauth2_provider_idtoken)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Oauth2ProviderIdtoken {
    pub id: i64,
    pub jti: Uuid,
    pub expires: DateTime<Utc>,
    pub scope: String,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub application_id: Option<i64>,
    pub user_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::oauth2_provider_refreshtoken)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Oauth2ProviderRefreshtoken {
    pub id: i64,
    pub token: String,
    pub access_token_id: Option<i64>,
    pub application_id: i64,
    pub user_id: i32,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub revoked: Option<DateTime<Utc>>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::package_settings)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct PackageSetting {
    pub id: i32,
    pub country: String,
    pub source: String,
    pub mb: Option<i32>,
    pub days: i32,
    pub priority: i32,
    pub product_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::payment_intent_request)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct PaymentIntentRequest {
    pub id: i64,
    pub email: Option<String>,
    pub name: Option<String>,
    pub payment_id: String,
    pub data: serde_json::Value,
    pub country: String,
    pub country_code: String,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::personalities)]
pub struct Personality {
    pub id: i32,
    pub title: Option<String>,
    pub value: Option<String>,
    pub author: Option<String>,
    pub image: Option<String>,
    pub location: Option<String>,
    pub created: DateTime<Utc>,
    pub user_id: Option<i32>,
    pub city: Option<String>,
    pub country_iso_code: Option<String>,
    pub country_name: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::point_transactions)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct PointTransaction {
    pub id: i32,
    pub transaction_id: Option<String>,
    pub point: i32,
    pub amount: i32,
    pub products: Vec<Option<String>>,
    pub synced: bool,
    pub created: DateTime<Utc>,
    pub created_user_id: Option<i32>,
    pub profile_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::post_card)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct PostCard {
    pub id: i32,
    pub text: Option<String>,
    pub image: Option<String>,
    pub stamp: Option<DateTime<Utc>>,
    pub created: DateTime<Utc>,
    pub from_user_id: Option<i32>,
    pub to_email: Option<String>,
    pub type_: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::post_card_frame)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct PostCardFrame {
    pub id: i32,
    pub name: Option<String>,
    pub image: Option<String>,
    pub created: DateTime<Utc>,
    pub active: bool,
    pub city: Option<String>,
    pub country_name: Option<String>,
    pub country_iso_code: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::post_card_to_user)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct PostCardToUser {
    pub id: i32,
    pub userpostcard_id: i32,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::rates)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Rate {
    pub id: i32,
    pub country: Option<String>,
    pub code: Option<String>,
    pub data: f64,
    pub call: f64,
    pub operator: Option<String>,
    pub network_type: String,
    pub active: bool,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::redemptions)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Redemption {
    pub id: i32,
    pub name: String,
    pub required_point: i32,
    pub valid_from: Option<DateTime<Utc>>,
    pub valid_to: Option<DateTime<Utc>>,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
    pub program_type: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::redemptions_products)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct RedemptionsProduct {
    pub id: i32,
    pub redemptions_id: i32,
    pub product_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::rest_framework_api_key_apikey)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct RestFrameworkApiKeyApikey {
    pub id: String,
    pub created: DateTime<Utc>,
    pub name: String,
    pub revoked: bool,
    pub expiry_date: Option<DateTime<Utc>>,
    pub hashed_key: String,
    pub prefix: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_cartitem)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct CartItem {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub quantity: i16,
    pub price: BigDecimal,
    pub tax: BigDecimal,
    pub product_type: String,
    pub name: String,
    pub image: Option<String>,
    pub expired: Option<DateTime<Utc>>,
    pub order_id: i32,
    pub package_id: Option<i32>,
    pub coupon: Option<String>,
    pub is_expired: bool,
    pub sim_serial: Option<String>,
    pub esim: bool,
    pub sim_id: Option<String>,
    pub start_date: Option<DateTime<Utc>>,
    pub product_id: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(code))]
#[diesel(table_name = crate::schema::shop_module_currency)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Currency {
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub code: String,
    pub label: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_deliveryrate)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Deliveryrate {
    pub id: i32,
    pub product_type: Option<String>,
    pub amount: f64,
    pub country: String,
    pub region: Option<String>,
    pub currency_id: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_fuppackage)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Fuppackage {
    pub id: i32,
    pub usage_type: String,
    pub code: String,
    pub sms_code: Option<String>,
    pub call_code: Option<String>,
    pub name: String,
    pub data_mb: i32,
    pub data_mb2: i32,
    pub throtle1: i32,
    pub throtle2: i32,
    pub fup_code: String,
    pub days: i32,
    pub per_day: bool,
    pub sim_rule: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_joyteltransaction)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Joyteltransaction {
    pub id: i32,
    pub transaction_id: String,
    pub created: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub api: String,
    pub body: serde_json::Value,
    pub response: serde_json::Value,
    pub sale_partner_id: Option<i32>,
    pub sim_serial: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_order)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Order {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub delivery_address: Option<String>,
    pub receiver_name: String,
    pub receiver_phone: String,
    pub sim_serial: Option<String>,
    pub coupon: Option<String>,
    pub customer_id: Option<i32>,
    pub status_id: String,
    pub stripe_token: Option<String>,
    pub receiver_email: Option<String>,
    pub esim: bool,
    pub product_id: Option<i32>,
    pub start_active_date: Option<DateTime<Utc>>,
    pub amount: BigDecimal,
    pub base_amount: BigDecimal,
    pub source: String,
    pub pricing_plan_id: Option<i32>,
    pub body: serde_json::Value,
    pub order_id: Option<String>,
    pub consummed: bool,
    pub sale_partner_id: Option<i32>,
    pub payment: serde_json::Value,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_package)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Package {
    pub id: i32,
    pub package_name: String,
    pub days: i32,
    pub package_code: String,
    pub provider: String,
    pub country: Option<String>,
    pub esim_code: String,
    pub per_day: bool,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_product)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Product {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub product_type: String,
    pub name: String,
    pub image: Option<String>,
    pub in_stock: i32,
    pub price: BigDecimal,
    pub tax: BigDecimal,
    pub expired_in_day: i32,
    pub currency_id: Option<String>,
    pub package_id: Option<i32>,
    pub protect_code: Option<String>,
    pub active: bool,
    pub provider: String,
    pub special_type: String,
    pub additional_credit: BigDecimal,
    pub fup_reset_in: i32,
    pub is_free: bool,
    pub countries: Vec<Option<String>>,
    pub popular: bool,
    pub use_credit: bool,
    pub country: Option<String>,
    pub show_in_app: bool,
    pub offset_time: i32,
    pub buy_count: i32,
    pub internal_popular: bool,
    pub show_in_web: bool,
    pub option_in_web: bool,
    pub sku: String,
    pub description: Option<String>,
    pub mb: i32,
    pub web_active: bool,
    pub reviews: i32,
    pub delivery_cost: BigDecimal,
    pub fup_id: Option<i32>,
    pub per_day: bool,
    pub rule_id: Option<i32>,
    pub calculate_percent: f64,
    pub stars: f64,
    pub bonus_point: i32,
    pub region_package: bool,
    pub calculate_mb: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_product_packages)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct ProductPackage {
    pub id: i32,
    pub product_id: i32,
    pub package_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_product_user)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct ProductUser {
    pub id: i32,
    pub product_id: i32,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_providerapilog)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Providerapilog {
    pub id: i32,
    pub created: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub api: String,
    pub body: serde_json::Value,
    pub response: serde_json::Value,
    pub status: Option<String>,
    pub provider: String,
    pub sim: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_salepartner)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Salepartner {
    pub id: i32,
    pub message_id: Option<String>,
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub booking_id: String,
    pub name: Option<String>,
    pub email: Option<String>,
    pub phone_number: Option<String>,
    pub product: Option<String>,
    pub start_date: Option<DateTime<Utc>>,
    pub send: bool,
    pub country: Option<String>,
    pub source: Option<String>,
    pub esim: bool,
    pub sim_number: Option<String>,
    pub sent_date: Option<String>,
    pub address: Option<String>,
    pub package_id: Option<i32>,
    pub package_country: Option<String>,
    pub real_option: Option<String>,
    pub real_product: Option<String>,
    pub days: i32,
    pub gb: f64,
    pub email_message_id: Option<i32>,
    pub from_country: Option<String>,
    pub booking_date: Option<DateTime<Utc>>,
    pub quantity: i32,
    pub sent_sims: i32,
    pub active: bool,
    pub note: Option<String>,
    pub cart_id: Option<i32>,
    pub date_request: Option<DateTime<Utc>>,
    pub order_data: serde_json::Value,
    pub status: String,
    pub activated: bool,
    pub uid: Option<Uuid>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(value))]
#[diesel(table_name = crate::schema::shop_module_status)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Statu {
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub value: String,
    pub label: String,
    pub default: bool,
    pub order_index: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_transaction)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Transaction {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub amount: BigDecimal,
    pub detail: String,
    pub stripe_token: Option<String>,
    pub sim_serial: Option<String>,
    pub coupon: Option<String>,
    pub order_id: i32,
    pub user_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::sim_package)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SimPackage {
    pub id: i32,
    pub start_date: Option<DateTime<Utc>>,
    pub end_date: Option<DateTime<Utc>>,
    pub package_name: String,
    pub provider: String,
    pub used_percent: f64,
    pub product_id: Option<i32>,
    pub sim_id: i32,
    pub created: Option<DateTime<Utc>>,
    pub date_used: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub expired: bool,
    pub serial_number: Option<String>,
    pub source: String,
    pub total: i32,
    pub used: i32,
    pub joytel_order_id: Option<String>,
    pub joytel_recharge_code: Option<String>,
    pub joytel_rsp_order_id: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::socialaccount_socialaccount)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SocialaccountSocialaccount {
    pub id: i32,
    pub provider: String,
    pub uid: String,
    pub last_login: NaiveDateTime,
    pub date_joined: NaiveDateTime,
    pub user_id: i32,
    pub extra_data: serde_json::Value,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::socialaccount_socialapp)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SocialaccountSocialapp {
    pub id: i32,
    pub provider: String,
    pub name: String,
    pub client_id: String,
    pub key: String,
    pub secret: String,
    pub provider_id: String,
    pub settings: serde_json::Value,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::socialaccount_socialapp_sites)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SocialaccountSocialappSite {
    pub id: i32,
    pub socialapp_id: i32,
    pub site_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::socialaccount_socialtoken)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SocialaccountSocialtoken {
    pub id: i32,
    pub token: String,
    pub token_secret: String,
    pub expires_at: Option<NaiveDateTime>,
    pub account_id: i32,
    pub app_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::taggit_tag)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct TaggitTag {
    pub id: i32,
    pub name: String,
    pub slug: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::taggit_taggeditem)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct TaggitTaggeditem {
    pub id: i32,
    pub object_id: i32,
    pub content_type_id: i32,
    pub tag_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::top_essential)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct TopEssential {
    pub id: i32,
    pub title: String,
    pub category: Option<String>,
    pub image: String,
    pub url: String,
    pub location: Option<String>,
    pub created: DateTime<Utc>,
    pub latitude: Option<String>,
    pub longitude: Option<String>,
    pub description: Option<String>,
    pub images: Vec<Option<String>>,
    pub city: Option<String>,
    pub country_iso_code: Option<String>,
    pub country_name: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::translations)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Translation {
    pub id: i64,
    pub country: String,
    pub data: serde_json::Value,
    pub active: bool,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::user_application)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct UserApplication {
    pub id: i32,
    pub scope: String,
    pub api_key_id: String,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::user_application_profile)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct UserApplicationProfile {
    pub id: i32,
    pub received: bool,
    pub avatar: Option<String>,
    pub age: Option<i32>,
    pub address: Option<String>,
    pub birthday: Option<DateTime<Utc>>,
    pub gender: Option<String>,
    pub social_id: Option<String>,
    pub country: Option<String>,
    pub language: Option<String>,
    pub user_id: i32,
    pub first_login: bool,
    pub connected_sim_id: Option<i32>,
    pub new_sim_id: Option<i32>,
    pub accept_terms: bool,
    pub allow_email: bool,
    pub email: Option<String>,
    pub membership_number: Option<String>,
    pub phone_number: Option<String>,
    pub point: i32,
    pub tier: String,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::user_balance)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct UserBalance {
    pub id: i32,
    pub balance: f64,
    pub last_topup: f64,
    pub created: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub user_id: i32,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::user_blacklist)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct UserBlacklist {
    pub id: i64,
    pub email: String,
    pub name: Option<String>,
    pub ip: Option<String>,
    pub location: serde_json::Value,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::user_passport)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct UserPassport {
    pub id: i32,
    pub title: Option<String>,
    pub subtitle: Option<String>,
    pub image: Option<String>,
    pub created: DateTime<Utc>,
    pub first_page: bool,
    pub seal_count: i32,
    pub user_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::visited_location)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct VisitedLocation {
    pub id: i32,
    pub location: Option<String>,
    pub country_name: Option<String>,
    pub country_iso_code: Option<String>,
    pub city: Option<String>,
    pub latitude: Option<String>,
    pub longitude: Option<String>,
    pub sealed: bool,
    pub created: DateTime<Utc>,
    pub user_id: Option<i32>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(key))]
#[diesel(table_name = crate::schema::weather_cache)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct WeatherCache {
    pub key: String,
    pub data: serde_json::Value,
    pub next_day_data: serde_json::Value,
    pub update: DateTime<Utc>,
    pub lat: Option<String>,
    pub long: Option<String>,
}

#[derive(Serialize, Queryable, Selectable, Debug, Identifiable)]
#[diesel(primary_key(request_id))]
#[diesel(table_name = crate::schema::zoho_email)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct ZohoEmail {
    pub email: String,
    pub request_id: String,
    pub booking_id: String,
    pub uid: String,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
}

